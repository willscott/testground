name = "dht"
# hashicorp/go-getter URLs, so in the future we can support fetching test plans
# from GitHub.
source_path = "file://${TESTGROUND_SRCDIR}/plans/dht"

[defaults]
builder = "exec:go"
runner = "local:exec"

[build_strategies."docker:go"]
enabled = true
go_version = "1.13"
module_path = "github.com/ipfs/testground/plans/dht"
exec_pkg = "."

# TODO: exec:go is not ready yet
[build_strategies."exec:go"]
enabled = true
module_path = "github.com/ipfs/testground/plans/dht"
exec_pkg = "."

[run_strategies."local:docker"]
enabled = true

[run_strategies."local:exec"]
enabled = true

[run_strategies."cluster:swarm"]
enabled = true

[run_strategies."cluster:k8s"]
enabled = true

# seq 0
[[testcases]]
name = "find-peers"
instances = { min = 16, max = 10000, default = 16 }

  [testcases.params]
  auto_refresh  = { type = "bool", desc = "enable DHT routing table autorefresh", unit = "bool", default = true }
  random_walk   = { type = "bool", desc = "run 5 random walks before the test", unit = "bool", default = false }
  n_bootstrap   = { type = "int", desc = "number of bootstrap nodes", unit = "int", default = 1 }
  bucket_size   = { type = "int", desc = "routing table bucket size", unit = "peers", default = 2 }
  n_find_peers  = { type = "int", desc = "number of peers to find", unit = "peers", default = 1 }
  timeout_secs  = { type = "int", desc = "test timeout", unit = "seconds", default = 300 }
  f_undialable  = { type = "float", desc = "fraction of undialable (non-bootstrap) nodes", unit = "peer fraction", default = 0.01 }

# seq 1
[[testcases]]
name = "find-providers"
instances = { min = 16, max = 250, default = 16 }

  [testcases.params]
  bucket_size = { type = "int", desc = "bucket size", unit = "peers", default = 2 }
  auto_refresh = { type = "bool", desc = "", unit = "bool", default = true }
  random_walk = { type = "bool", desc = "", unit = "bool", default = false }
  timeout_secs  = { type = "int", desc = "test timeout", unit = "seconds", default = 60 }
  n_bootstrap = { type = "int", desc = "number of bootstrap nodes", unit = "int", default = 1 }
  n_find_peers = { type = "int", desc = "number of peers to find", unit = "int", default = 1 }
  n_providing = { type = "int", desc = "nodes providing", unit = "int", default = 10 }
  record_count = { type = "int", desc = "TODO DESCRIPTION", unit = "int", default = 5 }
  #p_providing = { type = "int", desc = "", unit = "% of nodes" }
  #p_resolving = { type = "int", desc = "", unit = "% of nodes" }
  #p_failing = { type = "int", desc = "", unit = "% of nodes" }

# seq 2
[[testcases]]
name = "provide-stress"
instances = { min = 16, max = 250, default = 16 }

  [testcases.params]
  bucket_size = { type = "int", desc = "bucket size", unit = "peers" }
  auto_refresh = { type = "bool", desc = "", unit = "bool" }
  random_walk = { type = "bool", desc = "", unit = "bool" }
  n_bootstrap   = { type = "int", desc = "number of bootstrap nodes", unit = "int", default = 1 }
  n_provides = { type = "int", desc = "number of times to provide", unit = "int" }
  i_provides = { type = "int", desc = "interval between each provide", unit = "seconds" }

# seq 3
[[testcases]]
name = "store-get-value"
instances = { min = 16, max = 250, default = 16 }
roles = ["storer", "fetcher"]

  [testcases.params]
  bucket_size = { type = "int", desc = "bucket size", unit = "peers" }
